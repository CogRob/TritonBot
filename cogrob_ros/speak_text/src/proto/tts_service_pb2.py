# Copyright (c) 2018, The Regents of the University of California
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# * Neither the name of the University of California nor the
#   names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY OF CALIFORNIA
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tts_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='tts_service.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x11tts_service.proto\"\"\n\x12TextToAudioRequest\x12\x0c\n\x04text\x18\x01 \x01(\t\"\x90\x02\n\x13TextToAudioResponse\x12-\n\x05\x65rror\x18\x01 \x01(\x0b\x32\x1e.TextToAudioResponse.ErrorInfo\x12\"\n\x0c\x61udio_format\x18\x02 \x01(\x0e\x32\x0c.AudioFormat\x12\x12\n\naudio_data\x18\x03 \x01(\x0c\x1a\x91\x01\n\tErrorInfo\x12<\n\nerror_code\x18\x01 \x01(\x0e\x32(.TextToAudioResponse.ErrorInfo.ErrorCode\x12\x15\n\rerror_message\x18\x02 \x01(\t\"/\n\tErrorCode\x12\x0c\n\x08NO_ERROR\x10\x00\x12\x14\n\x10VT_LIBRARY_ERROR\x10\x01*C\n\x0b\x41udioFormat\x12\x16\n\x12UNKNOWN_PCM_FORMAT\x10\x00\x12\x1c\n\x18SIGNED_16BITS_LINEAR_PCM\x10\x01\x32H\n\nTtsService\x12:\n\x0bTextToAudio\x12\x13.TextToAudioRequest\x1a\x14.TextToAudioResponse\"\x00\x62\x06proto3')
)

_AUDIOFORMAT = _descriptor.EnumDescriptor(
  name='AudioFormat',
  full_name='AudioFormat',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='UNKNOWN_PCM_FORMAT', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SIGNED_16BITS_LINEAR_PCM', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=332,
  serialized_end=399,
)
_sym_db.RegisterEnumDescriptor(_AUDIOFORMAT)

AudioFormat = enum_type_wrapper.EnumTypeWrapper(_AUDIOFORMAT)
UNKNOWN_PCM_FORMAT = 0
SIGNED_16BITS_LINEAR_PCM = 1


_TEXTTOAUDIORESPONSE_ERRORINFO_ERRORCODE = _descriptor.EnumDescriptor(
  name='ErrorCode',
  full_name='TextToAudioResponse.ErrorInfo.ErrorCode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NO_ERROR', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VT_LIBRARY_ERROR', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=283,
  serialized_end=330,
)
_sym_db.RegisterEnumDescriptor(_TEXTTOAUDIORESPONSE_ERRORINFO_ERRORCODE)


_TEXTTOAUDIOREQUEST = _descriptor.Descriptor(
  name='TextToAudioRequest',
  full_name='TextToAudioRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='text', full_name='TextToAudioRequest.text', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=21,
  serialized_end=55,
)


_TEXTTOAUDIORESPONSE_ERRORINFO = _descriptor.Descriptor(
  name='ErrorInfo',
  full_name='TextToAudioResponse.ErrorInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='error_code', full_name='TextToAudioResponse.ErrorInfo.error_code', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_message', full_name='TextToAudioResponse.ErrorInfo.error_message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _TEXTTOAUDIORESPONSE_ERRORINFO_ERRORCODE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=185,
  serialized_end=330,
)

_TEXTTOAUDIORESPONSE = _descriptor.Descriptor(
  name='TextToAudioResponse',
  full_name='TextToAudioResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='error', full_name='TextToAudioResponse.error', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='audio_format', full_name='TextToAudioResponse.audio_format', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='audio_data', full_name='TextToAudioResponse.audio_data', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_TEXTTOAUDIORESPONSE_ERRORINFO, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=58,
  serialized_end=330,
)

_TEXTTOAUDIORESPONSE_ERRORINFO.fields_by_name['error_code'].enum_type = _TEXTTOAUDIORESPONSE_ERRORINFO_ERRORCODE
_TEXTTOAUDIORESPONSE_ERRORINFO.containing_type = _TEXTTOAUDIORESPONSE
_TEXTTOAUDIORESPONSE_ERRORINFO_ERRORCODE.containing_type = _TEXTTOAUDIORESPONSE_ERRORINFO
_TEXTTOAUDIORESPONSE.fields_by_name['error'].message_type = _TEXTTOAUDIORESPONSE_ERRORINFO
_TEXTTOAUDIORESPONSE.fields_by_name['audio_format'].enum_type = _AUDIOFORMAT
DESCRIPTOR.message_types_by_name['TextToAudioRequest'] = _TEXTTOAUDIOREQUEST
DESCRIPTOR.message_types_by_name['TextToAudioResponse'] = _TEXTTOAUDIORESPONSE
DESCRIPTOR.enum_types_by_name['AudioFormat'] = _AUDIOFORMAT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

TextToAudioRequest = _reflection.GeneratedProtocolMessageType('TextToAudioRequest', (_message.Message,), dict(
  DESCRIPTOR = _TEXTTOAUDIOREQUEST,
  __module__ = 'tts_service_pb2'
  # @@protoc_insertion_point(class_scope:TextToAudioRequest)
  ))
_sym_db.RegisterMessage(TextToAudioRequest)

TextToAudioResponse = _reflection.GeneratedProtocolMessageType('TextToAudioResponse', (_message.Message,), dict(

  ErrorInfo = _reflection.GeneratedProtocolMessageType('ErrorInfo', (_message.Message,), dict(
    DESCRIPTOR = _TEXTTOAUDIORESPONSE_ERRORINFO,
    __module__ = 'tts_service_pb2'
    # @@protoc_insertion_point(class_scope:TextToAudioResponse.ErrorInfo)
    ))
  ,
  DESCRIPTOR = _TEXTTOAUDIORESPONSE,
  __module__ = 'tts_service_pb2'
  # @@protoc_insertion_point(class_scope:TextToAudioResponse)
  ))
_sym_db.RegisterMessage(TextToAudioResponse)
_sym_db.RegisterMessage(TextToAudioResponse.ErrorInfo)



_TTSSERVICE = _descriptor.ServiceDescriptor(
  name='TtsService',
  full_name='TtsService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=401,
  serialized_end=473,
  methods=[
  _descriptor.MethodDescriptor(
    name='TextToAudio',
    full_name='TtsService.TextToAudio',
    index=0,
    containing_service=None,
    input_type=_TEXTTOAUDIOREQUEST,
    output_type=_TEXTTOAUDIORESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_TTSSERVICE)

DESCRIPTOR.services_by_name['TtsService'] = _TTSSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class TtsServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.TextToAudio = channel.unary_unary(
          '/TtsService/TextToAudio',
          request_serializer=TextToAudioRequest.SerializeToString,
          response_deserializer=TextToAudioResponse.FromString,
          )


  class TtsServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def TextToAudio(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_TtsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'TextToAudio': grpc.unary_unary_rpc_method_handler(
            servicer.TextToAudio,
            request_deserializer=TextToAudioRequest.FromString,
            response_serializer=TextToAudioResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'TtsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaTtsServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def TextToAudio(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaTtsServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def TextToAudio(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    TextToAudio.future = None


  def beta_create_TtsService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('TtsService', 'TextToAudio'): TextToAudioRequest.FromString,
    }
    response_serializers = {
      ('TtsService', 'TextToAudio'): TextToAudioResponse.SerializeToString,
    }
    method_implementations = {
      ('TtsService', 'TextToAudio'): face_utilities.unary_unary_inline(servicer.TextToAudio),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_TtsService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('TtsService', 'TextToAudio'): TextToAudioRequest.SerializeToString,
    }
    response_deserializers = {
      ('TtsService', 'TextToAudio'): TextToAudioResponse.FromString,
    }
    cardinalities = {
      'TextToAudio': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'TtsService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
